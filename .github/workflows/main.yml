name: Main

on:
  push:
    branches:
      - main

jobs:
  
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.9.0'

    - name: Install Angular CLI and dependencies
      run: |
        npm install -g @angular/cli@17.1.0
        cd ./frontend
        npm install

    - name: Build Angular app
      run: |
        cd ./frontend
        ng build --configuration production

    - name: Moving the build to the backend
      run: |
        cd ./frontend
        mv ./dist/com.heatpeakstudio.frontend/browser ../backend/src/main/resources/static

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'

    - name: Build Spring app
      run: |
        cd ./backend
        mvn clean package -DskipTests -Dspring-boot.version=3.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker Login
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and Upload the Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hps-server:latest
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Copy compose folder
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "./compose"
        target: "/root"

    - name: Actual deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          if [ ! -d "/root/compose" ]; then
            mkdir /root/compose
          fi
          if [ ! -d "/root/compose/certbot" ]; then
            cd /root/
            rm -Rv
            docker stop $(docker ps -a -q)
            docker container prune -f
            docker rmi $(docker images -a -q)
            docker network prune -f
            sudo kill -9 $(sudo lsof -t -i :443)
            systemctl stop docker
            systemctl start docker.service
            cd /root/compose/kickstart
            docker compose up -d
            sleep 60
            docker compose down
          fi
          rm -rf /root/compose/kickstart
          docker stop $(docker ps -a -q)
          docker container prune -f
          docker rmi $(docker images -a -q)
          docker network prune -f
          sudo kill -9 $(sudo lsof -t -i :443)
          systemctl stop docker
          systemctl start docker.service
          cd /root/compose
          docker compose up -d
