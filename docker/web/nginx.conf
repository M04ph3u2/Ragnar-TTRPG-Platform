# ===============================================================================
# Ragnar TTRPG Platform - Production Nginx Configuration
# ===============================================================================
# This configuration handles SSL termination, HTTP to HTTPS redirection,
# and reverse proxy to the application container. It includes proper security
# headers and Let's Encrypt certificate management.
# 
# Author: Stefano Sciacovelli (https://github.com/M04ph3u2)
# DevOps Infrastructure Implementation
# ===============================================================================

events {
    # Maximum number of simultaneous connections per worker process
    # Optimized for moderate traffic load with efficient memory usage
    worker_connections 1024;
}

http {
    # Hide nginx version information for security
    # Prevents version disclosure in HTTP headers and error pages
    server_tokens off;

    # ============================================================================
    # HTTP Server Block (Port 80)
    # ============================================================================
    # Handles initial HTTP requests and Let's Encrypt ACME challenges
    # Primary function: redirect all HTTP traffic to HTTPS for security
    # ============================================================================
    server {
        listen 80;                       # Standard HTTP port
        listen [::]:80;                  # IPv6 support
        server_name $DOMAIN;             # Domain from environment variable

        # Application traffic proxy (before SSL certificate exists)
        # This allows the application to work during initial setup
        location / {
            proxy_pass http://app:8080;   # Forward to application container
        }

        # Let's Encrypt ACME Challenge Handler
        # Required for automatic certificate generation and renewal
        # Serves challenge files from certbot container's webroot
        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;       # Certbot challenge directory
        }

        # Force HTTPS redirect for all non-challenge requests
        # Ensures all traffic uses secure connections
        return 301 https://$host$request_uri;
    }

    # ============================================================================
    # HTTPS Server Block (Port 443)
    # ============================================================================
    # Main production server handling all secure traffic
    # Provides SSL termination and reverse proxy to application
    # ============================================================================
    server {
        listen 443 ssl;                  # HTTPS with SSL termination
        listen [::]:443 ssl;             # IPv6 SSL support
        server_name $DOMAIN;             # Domain from environment variable

        # SSL Certificate Configuration
        # Certificates generated and maintained by Let's Encrypt/Certbot
        ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;     # Full certificate chain
        ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;   # Private key

        # Main Application Proxy
        # All application traffic forwarded to internal container
        location / {
            proxy_pass http://app:8080;   # Application container endpoint
            
            # Proxy headers for proper client information forwarding
            # (These could be added for enhanced functionality):
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Let's Encrypt ACME Challenge Handler (HTTPS)
        # Continues to serve challenges even on HTTPS for renewal
        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;       # Certbot challenge directory
        }
    }

}