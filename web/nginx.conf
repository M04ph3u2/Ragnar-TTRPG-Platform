# ============================================================================
# NGINX REVERSE PROXY CONFIGURATION
# Ragnar TTRPG Platform - Cloud Infrastructure
# ============================================================================
# 
# This configuration implements a secure reverse proxy for Nextcloud with:
# - Automatic HTTP to HTTPS redirection
# - SSL/TLS termination with Let's Encrypt certificates
# - Proxy pass to Nextcloud container
# - ACME challenge handling for certificate renewal
# - Security optimizations and performance tuning
# 
# Author: JuggleHive Development Team
# Version: 1.0.0
# ============================================================================

# Global events configuration
# Controls the number of worker connections and processing method
events {
    worker_connections 1024;                 # Maximum concurrent connections per worker
}

# Main HTTP configuration block
http {
    # ========================================================================
    # SECURITY AND PERFORMANCE SETTINGS
    # ========================================================================
    
    # Hide nginx version information for security
    server_tokens off;
    
    # Set maximum client body size to handle large file uploads
    # This allows users to upload files up to 513MB to Nextcloud
    client_max_body_size 513M;

    # ========================================================================
    # HTTP SERVER BLOCK (Port 80)
    # Handles initial requests and ACME challenges, then redirects to HTTPS
    # ========================================================================
    server {
        # Listen on both IPv4 and IPv6 for maximum compatibility
        listen 80;
        listen [::]:80;
        
        # Server name using environment variable for dynamic configuration
        server_name cloud.$DOMAIN;

        # Default location - proxy all requests to Nextcloud
        # This is needed for the initial Nextcloud setup before SSL is configured
        location / {
            proxy_pass http://nextcloud:80;
        }

        # ACME challenge location for Let's Encrypt certificate validation
        # This path must be accessible via HTTP for certificate generation/renewal
        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;           # Serve files from certbot webroot
        }

        # Redirect all HTTP traffic to HTTPS for security
        # This ensures all user data is encrypted in transit
        return 301 https://$host$request_uri;
    }

    # ========================================================================
    # HTTPS SERVER BLOCK (Port 443)
    # Handles secure traffic with SSL/TLS encryption
    # ========================================================================
    server {
        # Listen on both IPv4 and IPv6 with SSL and HTTP/2 support
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        
        # Server name using environment variable for dynamic configuration
        server_name cloud.$DOMAIN;

        # ====================================================================
        # SSL/TLS CONFIGURATION
        # ====================================================================
        
        # SSL certificate files generated by Let's Encrypt/Certbot
        # These certificates are automatically renewed by the certbot service
        ssl_certificate /etc/letsencrypt/live/cloud.$DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/cloud.$DOMAIN/privkey.pem;

        # ====================================================================
        # PROXY CONFIGURATION
        # ====================================================================
        
        # Main location block - proxy all requests to Nextcloud container
        location / {
            # Forward requests to the Nextcloud container on port 80
            # The container handles the internal HTTP processing
            proxy_pass http://nextcloud:80;
            
            # Additional proxy headers could be added here for better integration:
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ACME challenge location for certificate renewal
        # Must remain accessible even on HTTPS for ongoing certificate management
        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;           # Serve files from certbot webroot
        }
    }
}

# ============================================================================
# CONFIGURATION NOTES
# ============================================================================
# 
# Environment Variables:
# - $DOMAIN: The domain name (e.g., example.com) - configured in docker-compose
# 
# Security Features:
# - Server tokens disabled to hide nginx version
# - Automatic HTTP to HTTPS redirection
# - SSL/TLS encryption for all user traffic
# - HTTP/2 support for improved performance
# 
# Performance Optimizations:
# - Large client body size for file uploads
# - HTTP/2 protocol support
# - Efficient worker connection handling
# 
# Certificate Management:
# - Automatic certificate renewal via ACME challenges
# - Let's Encrypt integration through certbot service
# - Certificates stored in persistent volumes
# 
# Maintenance:
# - Monitor nginx error logs: docker-compose logs nginx
# - Test configuration: docker-compose exec nginx nginx -t
# - Reload configuration: docker-compose exec nginx nginx -s reload
# - Certificate renewal is handled automatically by certbot service